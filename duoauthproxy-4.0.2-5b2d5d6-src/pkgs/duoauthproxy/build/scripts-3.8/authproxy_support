#!/root/duoauthproxy-4.0.2-5b2d5d6-src/duoauthproxy-build/usr/local/bin/python3
#
# Copyright (c) 2011 Duo Security
# All Rights Reserved
#

from __future__ import print_function
import argparse
import os
import time
from subprocess import call
from zipfile import ZipFile

from duoauthproxy.lib import util

file_paths = []


def add_config_path():
    config_file = os.path.join('conf', 'authproxy.cfg')
    scrubbed_config_file = os.path.join('conf', 'clean_authproxy.cfg')

    with open(config_file, "r") as lines:
        with open(scrubbed_config_file, "w") as output:
            for line in lines:
                if ("skey" in line) or ('secret' in line) or ("password" in line):
                    key, seperator, value = line.partition("=")
                    output.write(key + seperator + "*****\n")
                else:
                    output.write(line)

    file_paths.append(scrubbed_config_file)


def add_logs_path(log_dir):
    logs_dir = os.path.join(log_dir)

    for dirpath, _, filenames in os.walk(logs_dir):
        for filename in filenames:
            if "log" in filename:
                file_paths.append(os.path.join(dirpath, filename))


def create_zip(filename):
    with ZipFile(filename, 'w') as zip:
        for file_to_zip in file_paths:
            zip.write(file_to_zip)


def run_connectivity_tool():
    call(os.path.join('bin', 'authproxy_connectivity_tool'))


def cleanup():
    os.remove(os.path.join('conf', 'clean_authproxy.cfg'))


def main():
    parser = argparse.ArgumentParser(description="This script creates a zip file containing a sanitized authentication proxy configuration file as well as all the logs files.")
    parser.add_argument('-l', '--log-dir', type=str, required=False, default="log",
                        help='Log directory where the authproxy logs are stored')
    args = parser.parse_args()

    filename = "duoauthproxy-support-{}.zip".format(time.strftime("%Y%m%d-%H%M%S"))

    home_dir = util.get_home_dir()
    os.chdir(home_dir)

    try:
        print("Running the Duo Authentication Proxy support tool in order to gather necessary files. This may take several minutes...")
        run_connectivity_tool()
        add_config_path()
        add_logs_path(args.log_dir)
        create_zip(filename)
        cleanup()

        full_zip_file_path = os.path.join(home_dir, filename)
        print("Authentication Proxy support bundle successfully created: {}".format(full_zip_file_path))

    except Exception as e:
        print(e)


if __name__ == '__main__':
    main()
